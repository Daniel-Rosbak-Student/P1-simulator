Index: program/main.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n\r\n// food type is given as enum, where the int values are the number of days the food products last in the fridge\r\n// this helps us with our calculations, as well as makes it easy for the user to input food type\r\ntypedef enum {SEAFOOD = 3, BAKEDGOODS = 4, MEAT = 5, GREENS = 6, EGGS = 7, DAIRY = 8} foodType;\r\n\r\n\r\ntypedef struct {\r\n    char regionName[100];\r\n    foodType foodType;\r\n    int numOfProducers;\r\n    int* baseExcessPerOrg;\r\n    int numOfOrganizations;\r\n    int* demandPerOrg;\r\n    double* excessVolatility;\r\n    double* costPerUnit;\r\n    double* transportCost;\r\n} RegionStruct;\r\n\r\n\r\ntypedef struct {\r\n    char* regionName;\r\n    char* foodType;\r\n    int foodSaved;\r\n    int foodWasted;\r\n    double costOfUnits;\r\n    double costOfTransport;\r\n} RegionResultStruct;\r\n\r\nRegionStruct* readFile(int* numOfRegions) {\r\n\r\n// reads the file given by the user for data for the region(s)\r\n\r\n    RegionStruct* newRegion;\r\n\r\n// open the file and load how many regions there are\r\n    FILE* regionsFile = fopen(\"settings.txt\", \"r\");\r\n    fscanf(regionsFile, \" %d%*c\", numOfRegions);\r\n\r\n// allocating memory with malloc for our region structs (array if more than 1 region)\r\n    newRegion = malloc(sizeof (RegionStruct) * *numOfRegions);\r\n\r\n    // for-loop for loading all data for regions\r\n\r\n    for (int i = 0; i < *numOfRegions; ++i) {\r\n        fscanf(regionsFile, \" %[0-9A-Za-z]%*c %u%*c %d%*c\", newRegion[i].regionName,\r\n               &newRegion[i].foodType, &newRegion[i].numOfProducers);\r\n\r\n        //we allocate memory for excess produce, excess volatility, cost per unit and transport cost\r\n        newRegion[i].baseExcessPerOrg = malloc(sizeof (int) * newRegion[i].numOfProducers);\r\n        newRegion[i].excessVolatility = malloc(sizeof (double) * newRegion[i].numOfProducers);\r\n        newRegion[i].costPerUnit = malloc(sizeof (double) * newRegion[i].numOfProducers);\r\n        newRegion[i].transportCost = malloc(sizeof (double) * newRegion[i].numOfProducers);\r\n\r\n        //we scan the base excess for each producer\r\n        for (int j = 0; j < newRegion[i].numOfProducers; ++j) {\r\n            fscanf(regionsFile, \" %d%*c\", &newRegion[i].baseExcessPerOrg[j]);\r\n        }\r\n\r\n        fscanf(regionsFile, \" %d%*c\", &newRegion[i].numOfOrganizations);\r\n\r\n        //we allocate memory for demand\r\n        newRegion[i].demandPerOrg = malloc(sizeof (int) * newRegion[i].numOfOrganizations);\r\n\r\n        //we scan the demand for each organization\r\n        for (int j = 0; j < newRegion[i].numOfOrganizations; ++j) {\r\n            fscanf(regionsFile, \" %d%*c\", &newRegion[i].demandPerOrg[j]);\r\n        }\r\n\r\n        //we scan excess volatility for each producer\r\n        for (int j = 0; j < newRegion[i].numOfProducers; ++j) {\r\n            fscanf(regionsFile, \" %lf%*c\", &newRegion[i].excessVolatility[j]);\r\n        }\r\n\r\n        //we scan cost per unit for each producer\r\n        for (int j = 0; j < newRegion[i].numOfProducers; ++j) {\r\n            fscanf(regionsFile, \" %lf%*c\", &newRegion[i].costPerUnit[j]);\r\n        }\r\n\r\n        //we scan transport cost for each producer\r\n        for (int j = 0; j < newRegion[i].numOfProducers; ++j) {\r\n            fscanf(regionsFile, \" %lf%*c\", &newRegion[i].transportCost[j]);\r\n        }\r\n    }\r\n\r\n    return newRegion;\r\n}\r\n\r\n// if the user chooses to input data themselves\r\nRegionStruct* readFromTerminal(int* numOfRegions) {\r\n    int regions, producers, organizations, foodtype;\r\n\r\n    printf(\"Please enter the number of regions: \");\r\n    scanf(\" %d\", numOfRegions);\r\n\r\n    // allocating memory for the region struct\r\n    RegionStruct* newRegion = malloc(sizeof(RegionStruct) * *numOfRegions);\r\n\r\n    for (int i = 0; i < *numOfRegions; ++i) {\r\n        printf(\"Please enter information for region %d: \\n\", i + 1);\r\n        printf(\"Region name (less than 100 characters): \");\r\n        scanf(\" %s\", newRegion[i].regionName);\r\n\r\n        printf(\"How many producers are there in the region?: \");\r\n        scanf(\" %d\", &producers);\r\n\r\n        newRegion[i].numOfProducers = producers;\r\n\r\n        // allocating memory for excess, volatility, cost per unit and transport cost based on the number of producers\r\n        newRegion[i].baseExcessPerOrg = malloc(sizeof(int) * producers);\r\n        newRegion[i].excessVolatility = malloc(sizeof(double) * producers);\r\n        newRegion[i].costPerUnit = malloc(sizeof(double) * producers);\r\n        newRegion[i].transportCost = malloc(sizeof(double) * producers);\r\n\r\n        printf(\"Please enter excess food per organization (seperated by space): \");\r\n\r\n        for (int j = 0; j < producers; ++j){\r\n            scanf(\" %d\", &newRegion[i].baseExcessPerOrg[j]);\r\n        }\r\n\r\n        printf(\"Please input food type for region:\\n\");\r\n        printf(\"Type 1 for meat\\n\");\r\n        printf(\"Type 2 for greens\\n\");\r\n        printf(\"Type 3 for dairy\\n\");\r\n        printf(\"Type 4 for seafood\\n\");\r\n        printf(\"Type 5 for baked goods\\n\");\r\n        printf(\"Type 6 for eggs\\n\");\r\n        scanf(\" %d\", &foodtype);\r\n\r\n        switch(foodtype){\r\n            case 1:\r\n                newRegion[i].foodType = MEAT;\r\n                break;\r\n            case 2:\r\n                newRegion[i].foodType = GREENS;\r\n                break;\r\n            case 3:\r\n                newRegion[i].foodType = DAIRY;\r\n                break;\r\n            case 4:\r\n                newRegion[i].foodType = SEAFOOD;\r\n                break;\r\n            case 5:\r\n                newRegion[i].foodType = BAKEDGOODS;\r\n                break;\r\n            case 6:\r\n                newRegion[i].foodType = EGGS;\r\n                break;\r\n            default:\r\n                newRegion[i].foodType = MEAT;\r\n        }\r\n\r\n        printf(\"Please enter volatility of excess as a multiplier per producer (0: the excess is constant  \"\r\n               \"1: the excess fluctuates between double of base and zero): \");\r\n\r\n        for (int j = 0; j < producers; ++j){\r\n            scanf(\" %lf\", &newRegion[i].excessVolatility[j]);\r\n        }\r\n\r\n        printf(\"Please enter cost per unit of the excess food per producer (seperated by space): \");\r\n\r\n        for (int j = 0; j < producers; ++j){\r\n            scanf(\" %lf\", &newRegion[i].costPerUnit[j]);\r\n        }\r\n\r\n        printf(\"Please enter transportation costs of the excess food per producer (seperated by space): \");\r\n\r\n        for (int j = 0; j < producers; ++j){\r\n            scanf(\" %lf\", &newRegion[i].transportCost[j]);\r\n        }\r\n\r\n        printf(\"How many organizations in the region?: \");\r\n        scanf(\" %d\", &organizations);\r\n\r\n        newRegion[i].numOfOrganizations = organizations;\r\n        newRegion[i].demandPerOrg = malloc(sizeof(int) * organizations);\r\n\r\n        printf(\"Please enter demand per organization (seperated by space): \");\r\n\r\n        for (int j = 0; j < producers; ++j){\r\n            scanf(\" %d\", &newRegion[i].demandPerOrg[j]);\r\n        }\r\n    }\r\n    return newRegion;\r\n}\r\n\r\n\r\nvoid saveFile(RegionStruct* region, int numOfRegions) {\r\n\r\n    FILE* regionsFile = fopen(\"Result.txt\", \"w\");\r\n\r\n    fprintf(regionsFile, \"%d, \", numOfRegions);\r\n\r\n    for (int i = 0; i < numOfRegions; ++i) {\r\n        fprintf(regionsFile, \"%s, %d, %d, \", region[i].regionName, region[i].foodType, region[i].numOfProducers);\r\n\r\n        for (int j = 0; j < region[i].numOfProducers; ++j) {\r\n            fprintf(regionsFile, \"%d, \", region[i].baseExcessPerOrg[j]);\r\n        }\r\n\r\n        fprintf(regionsFile, \"%d, \", region[i].numOfOrganizations);\r\n\r\n        for (int j = 0; j < region[i].numOfOrganizations; ++j) {\r\n            fprintf(regionsFile, \"%d, \", region[i].demandPerOrg[j]);\r\n        }\r\n\r\n\r\n        for (int j = 0; j < region[i].numOfProducers; ++j) {\r\n            fprintf(regionsFile, \"%.2lf, \", region[i].excessVolatility[j]);\r\n        }\r\n\r\n        //we scan cost per unit for each producer\r\n        for (int j = 0; j < region[i].numOfProducers; ++j) {\r\n            fprintf(regionsFile, \"%.2lf, \", region[i].costPerUnit[j]);\r\n        }\r\n\r\n        //we scan transport cost for each producer\r\n        for (int j = 0; j < region[i].numOfProducers; ++j) {\r\n            fprintf(regionsFile, \"%.2lf, \", region[i].transportCost[j]);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nchar* convertFoodtypeEnum(foodType input){\r\n    char* output;\r\n\r\n    switch (input) {\r\n        case SEAFOOD:\r\n            output = \"Seafood\";\r\n            break;\r\n        case BAKEDGOODS:\r\n            output = \"Bakedgoods\";\r\n            break;\r\n        case MEAT:\r\n            output = \"Meat\";\r\n            break;\r\n        case GREENS:\r\n            output = \"Greens\";\r\n            break;\r\n        case EGGS:\r\n            output = \"Eggs\";\r\n            break;\r\n        case DAIRY:\r\n            output = \"Dairy\";\r\n            break;\r\n        default:\r\n            output = \"ERROR\";\r\n    }\r\n    return output;\r\n}\r\n\r\n\r\nvoid calculateIteration(RegionStruct* regions, RegionResultStruct* results, int numOfRegions, int numOfIterations) {\r\n    //Here we simulate the given amount of days\r\n    for (int i = 0; i < numOfIterations; ++i) {\r\n        for (int j = 0; j < numOfRegions; ++j) {\r\n            for (int k = 0; k < regions[j].numOfOrganizations; ++k) {\r\n                //calculate numbers\r\n                while (regions[j].demandPerOrg[k] > 0) {\r\n                    int cheapestProducersIndex = 0;\r\n                    for (int l = 0; l < regions[j].numOfProducers; ++l) {\r\n                        if (regions[j].baseExcessPerOrg > 0) {\r\n                            if (regions[j].baseExcessPerOrg[l] >= regions[j].demandPerOrg[k]) {\r\n                                (regions[j]. regions[j].transportCost[l] * regions[j].distanceToOrg[k]);\r\n                            } else {\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /*Cost of Transport\r\n             * Cost is at the moment fixed to each location's \"Transport cost\"\r\n             *\r\n             */\r\n\r\n\r\n    //find_best_route();\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //Cost of Units\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nvoid outputResult(RegionResultStruct* results, int numberOfRegions) {\r\n\r\n    int i;\r\n    for(i = 0; i < numberOfRegions; i++)\r\n    {\r\n        printf(\"Region\\tFood type\\tFood saved\\tFood wasted\\tCost of food\\tCost of Transport\\n\");\r\n        printf(\"%s\\t\", results[i].regionName);\r\n        printf(\"%s\\t\\t\", results[i].foodType);\r\n        printf(\"%d\\t\\t\", results[i].foodSaved);\r\n        printf(\"%d\\t\\t\", results[i].foodWasted);\r\n        printf(\"%.2lf\\t\\t\", results[i].costOfUnits);\r\n        printf(\"%.2lf\\n\", results[i].costOfTransport);\r\n    }\r\n\r\n    /*\r\n     * Result format:\r\n     * Region    food type    food saved    food wasted    cost of food    cost of transport\r\n     * region1   Eggs        126            35            430.12           232.12\r\n     * region2   Seafood     832            793           1534.54          12.2\r\n     * Mogens    bakedgoods  23             46            242.75           971.23\r\n     * Robert    meat        427            0             623.84           726.45\r\n     */\r\n\r\n}\r\n\r\n\r\nint main() {\r\n\r\n    char input;\r\n    int numberOfRegions;\r\n    RegionStruct* regions;\r\n    RegionResultStruct* results;\r\n\r\n    //ask if user wants to read file or terminal\r\n    printf(\"Would you like to load a file? (y/n)\");\r\n    while (1) {\r\n        scanf(\"%c\", &input);\r\n\r\n        if(input == 'y'){\r\n            regions = readFile(&numberOfRegions);\r\n            results = malloc(sizeof (RegionResultStruct) * numberOfRegions);\r\n            break;\r\n        } else if(input == 'n') {\r\n            regions = readFromTerminal(&numberOfRegions);\r\n            results = malloc(sizeof (RegionResultStruct) * numberOfRegions);\r\n            break;\r\n        } else {\r\n            printf(\"Please input 'y' or 'n'\");\r\n        }\r\n    }\r\n\r\n    printf(\"%s, %d, %d, %d, %d, %d, %.2lf, %.2lf, %.2lf\\n\", regions[0].regionName, regions[0].foodType, regions[0].numOfProducers,\r\n           regions[0].baseExcessPerOrg[0], regions[0].numOfOrganizations, regions[0].demandPerOrg[0],\r\n           regions[0].excessVolatility[0], regions[0].costPerUnit[0], regions[0].transportCost[0]);\r\n\r\n    calculateIteration(regions, results);\r\n\r\n    outputResult(results, numberOfRegions);\r\n\r\n    saveFile(regions, numberOfRegions);\r\n\r\n    free(regions);\r\n\r\n    return 0;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/program/main.c b/program/main.c
--- a/program/main.c	(revision 944ca0a239634769ac481d7f34f1b1c382f91d3c)
+++ b/program/main.c	(date 1670350495908)
@@ -14,6 +14,7 @@
     int* baseExcessPerOrg;
     int numOfOrganizations;
     int* demandPerOrg;
+    double* distanceToOrg;
     double* excessVolatility;
     double* costPerUnit;
     double* transportCost;
@@ -69,6 +70,13 @@
             fscanf(regionsFile, " %d%*c", &newRegion[i].demandPerOrg[j]);
         }
 
+        newRegion[i].distanceToOrg = malloc(sizeof (int) * newRegion[i].numOfOrganizations);
+
+        //we scan the distance to each organization
+        for (int j = 0; j < newRegion[i].numOfOrganizations; ++j) {
+            fscanf(regionsFile, " %lf%*c", &newRegion[i].distanceToOrg[j]);
+        }
+
         //we scan excess volatility for each producer
         for (int j = 0; j < newRegion[i].numOfProducers; ++j) {
             fscanf(regionsFile, " %lf%*c", &newRegion[i].excessVolatility[j]);
@@ -95,7 +103,7 @@
     printf("Please enter the number of regions: ");
     scanf(" %d", numOfRegions);
 
-    // allocating memory for the region struct
+    // allocating memory for the region struct(s) based on the number of regions
     RegionStruct* newRegion = malloc(sizeof(RegionStruct) * *numOfRegions);
 
     for (int i = 0; i < *numOfRegions; ++i) {
@@ -129,6 +137,7 @@
         printf("Type 6 for eggs\n");
         scanf(" %d", &foodtype);
 
+        // switch to "translate" the user input to our enum values for food type
         switch(foodtype){
             case 1:
                 newRegion[i].foodType = MEAT;
@@ -174,14 +183,22 @@
         printf("How many organizations in the region?: ");
         scanf(" %d", &organizations);
 
+        // using the user input for number of organizations, allocating memory accordingly for demand and distance
         newRegion[i].numOfOrganizations = organizations;
         newRegion[i].demandPerOrg = malloc(sizeof(int) * organizations);
+        newRegion[i].distanceToOrg = malloc(sizeof(int) * organizations);
 
         printf("Please enter demand per organization (seperated by space): ");
 
-        for (int j = 0; j < producers; ++j){
+        for (int j = 0; j < organizations; ++j){
             scanf(" %d", &newRegion[i].demandPerOrg[j]);
         }
+
+        printf("Please enter distance to each organization (seperated by space): ");
+
+        for (int j = 0; j < organizations; ++j){
+            scanf(" %lf", &newRegion[i].distanceToOrg[j]);
+        }
     }
     return newRegion;
 }
@@ -301,10 +318,10 @@
 
 void outputResult(RegionResultStruct* results, int numberOfRegions) {
 
+    printf("Region\tFood type\tFood saved\tFood wasted\tCost of food\tCost of Transport\n");
     int i;
     for(i = 0; i < numberOfRegions; i++)
     {
-        printf("Region\tFood type\tFood saved\tFood wasted\tCost of food\tCost of Transport\n");
         printf("%s\t", results[i].regionName);
         printf("%s\t\t", results[i].foodType);
         printf("%d\t\t", results[i].foodSaved);
